Q1
#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 4

int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
    {0, 0, 1, 2},
    {1, 0, 0, 0},
    {1, 3, 5, 4},
    {0, 6, 3, 2},
    {0, 0, 1, 4}
};

int max[MAX_PROCESSES][MAX_RESOURCES] = {
    {0, 0, 1, 2},
    {1, 7, 5, 0},
    {2, 3, 5, 6},
    {0, 6, 5, 2},
    {0, 6, 5, 6}
};

int available[MAX_RESOURCES] = {1, 5, 2, 0};

void calculate_need(int need[][MAX_RESOURCES]);
bool is_safe_state(int need[][MAX_RESOURCES], bool finish[], int work[]);

int main() {
    int need[MAX_PROCESSES][MAX_RESOURCES];
    bool finish[MAX_PROCESSES] = {false};
    int work[MAX_RESOURCES];

    calculate_need(need);


    bool safe_state = is_safe_state(need, finish, work);

    printf("Need Matrix:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }


    if (safe_state) {
        printf("\nThe system is in a safe state.\n");
        printf("Safe sequence: ");
        for (int i = 0; i < MAX_PROCESSES; i++) {
            printf("P%d ", work[i]);
        }
        printf("\n");
    } else {
        printf("\nThe system is not in a safe state.\n");
    }

    return 0;
}


void calculate_need(int need[][MAX_RESOURCES]) {
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

bool is_safe_state(int need[][MAX_RESOURCES], bool finish[], int work[]) {
    int work_copy[MAX_RESOURCES];


    for (int i = 0; i < MAX_RESOURCES; i++) {
        work_copy[i] = available[i];
    }

    for (int i = 0; i < MAX_PROCESSES; i++) {
        if (!finish[i]) {
            bool can_execute = true;
            for (int j = 0; j < MAX_RESOURCES; j++) {
                if (need[i][j] > work_copy[j]) {
                    can_execute = false;
                    break;
                }
            }
            if (can_execute) {
                
                finish[i] = true;
                for (int j = 0; j < MAX_RESOURCES; j++) {
                    work_copy[j] += allocation[i][j];
                }
                work[i] = i;
                i = -1; 
            }
        }
    }


    for (int i = 0; i < MAX_PROCESSES; i++) {
        if (!finish[i]) {
            return false;
        }
    }


    return true;
}
