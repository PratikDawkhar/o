Q1
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char** argv)
{
int rank, size;
int array[ARRAY_SIZE];
int i, sum = 0, global_sum = 0;
// Initialize MPI
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
// Initialize random number generator
srand(time(NULL) + rank);
// Fill array with random numbers
for (i = 0; i < ARRAY_SIZE; i++) {
array[i] = rand() % 1000;
}
// Calculate local sum of odd numbers
for (i = 0; i < ARRAY_SIZE; i++) {
if (array[i] % 2 != 0) {
sum += array[i];
}
}
// Reduce sum across all processes
MPI_Reduce(&sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
if (rank == 0) {
printf("The sum of all odd numbers in the array is: %d\n", global_sum);
}
// Finalize MPI
MPI_Finalize();
return 0;
}

Q2
#include <stdio.h>
#include <stdbool.h>

// Function to calculate need matrix
void calculateNeedMatrix(int need[][3], int max[][3], int allocation[][3], int num_processes, int num_resources) {
    for (int i = 0; i < num_processes; i++) {
        for (int j = 0; j < num_resources; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

// Function to check if the system is in a safe state and find the safe sequence
bool isSafeState(int available[], int allocation[][3], int need[][3], int num_processes, int num_resources, int safe_sequence[]) {
    int work[num_resources];
    bool finish[num_processes];

    // Initialize work and finish arrays
    for (int i = 0; i < num_resources; i++) {
        work[i] = available[i];
    }
    for (int i = 0; i < num_processes; i++) {
        finish[i] = false;
    }

    int num_finished_processes = 0;
    while (num_finished_processes < num_processes) {
        bool found = false;
        for (int i = 0; i < num_processes; i++) {
            if (!finish[i]) {
                bool can_allocate = true;
                for (int j = 0; j < num_resources; j++) {
                    if (need[i][j] > work[j]) {
                        can_allocate = false;
                        break;
                    }
                }
                if (can_allocate) {
                    // Process i can finish
                    for (int j = 0; j < num_resources; j++) {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = true;
                    safe_sequence[num_finished_processes] = i;
                    num_finished_processes++;
                    found = true;
                }
            }
        }
        if (!found) {
            // System is not in a safe state
            return false;
        }
    }
    // System is in a safe state
    return true;
}

int main() {
    int num_processes, num_resources;

    // Accepting input for number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);
    printf("Enter the number of resources: ");
    scanf("%d", &num_resources);

    // Allocating memory for arrays
    int max[num_processes][3], allocation[num_processes][3], available[3], need[num_processes][3];
    int safe_sequence[num_processes];

    // Accepting input for max matrix
    printf("Enter the max matrix:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process P%d: ", i);
        for (int j = 0; j < num_resources; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Accepting input for allocation matrix
    printf("Enter the allocation matrix:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process P%d: ", i);
        for (int j = 0; j < num_resources; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Accepting input for available resources
    printf("Enter the available resources: ");
    for (int i = 0; i < num_resources; i++) {
        scanf("%d", &available[i]);
    }

    // Calculating need matrix
    calculateNeedMatrix(need, max, allocation, num_processes, num_resources);

    // Checking if the system is in a safe state and finding safe sequence
    if (isSafeState(available, allocation, need, num_processes, num_resources, safe_sequence)) {
        printf("The system is in a safe state.\n");
        printf("Safe sequence: ");
        for (int i = 0; i < num_processes; i++) {
            printf("P%d ", safe_sequence[i]);
        }
        printf("\n");
    } else {
        printf("The system is not in a safe state.\n");
    }

    return 0;
}