Q1
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

// Function to display the bit vector
void showBitVector(bool *allocated, int n) {
    printf("Bit Vector: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", allocated[i]);
    }
    printf("\n");
}

// Function to create new file
void createNewFile(bool *allocated, int n) {
    int start_block, file_size;
    printf("Enter the starting block number: ");
    scanf("%d", &start_block);
    printf("Enter the file size: ");
    scanf("%d", &file_size);

    // Check if the blocks are available
    bool available = true;
    for (int i = start_block; i < start_block + file_size; i++) {
        if (allocated[i]) {
            available = false;
            break;
        }
    }

    // Allocate the blocks if available
    if (available) {
        for (int i = start_block; i < start_block + file_size; i++) {
            allocated[i] = true;
        }
        printf("File created successfully.\n");
    } else {
        printf("Not enough space to create the file.\n");
    }
}

// Function to show directory
void showDirectory(bool *allocated, int n) {
    printf("Directory:\n");
    printf("Block No.\tFile Name\n");
    int file_count = 1;
    bool in_file = false;
    for (int i = 0; i < n; i++) {
        if (allocated[i]) {
            if (!in_file) {
                printf("%d\t\tFile %d\n", i, file_count);
                in_file = true;
            }
        } else {
            if (in_file) {
                file_count++;
                in_file = false;
            }
        }
    }
    if (in_file) {
        file_count++;
    }
    printf("Total files: %d\n", file_count);
}

int main() {
    int n;
    printf("Enter the number of blocks on disk: ");
    scanf("%d", &n);

    // Allocate memory for the bit vector
    bool *allocated = (bool *)malloc(n * sizeof(bool));
    if (allocated == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    // Initialize the bit vector
    for (int i = 0; i < n; i++) {
        allocated[i] = false;
    }

    // Seed the random number generator
    srand(time(NULL));

    int choice;
    while (1) {
        printf("\nMenu:\n");
        printf("1. Show Bit Vector\n");
        printf("2. Create New File\n");
        printf("3. Show Directory\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                showBitVector(allocated, n);
                break;
            case 2:
                createNewFile(allocated, n);
                break;
            case 3:
                showDirectory(allocated, n);
                break;
            case 4:
                free(allocated);
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

Q2
#include<stdio.h>
#include<stdlib.h>
int main()
{
int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move;
printf("Enter the number of Requests\n");
scanf("%d",&n);
printf("Enter the Requests sequence\n");
for(i=0;i<n;i++)
scanf("%d",&RQ[i]);
printf("Enter initial head position\n");
scanf("%d",&initial);
printf("Enter total disk size\n");
scanf("%d",&size);
printf("Enter the head movement direction for high 1 and for low 0\n");
scanf("%d",&move);
// logic for C-Scan disk scheduling
/*logic for sort the request array */
for(i=0;i<n;i++)
{
for( j=0;j<n-i-1;j++)
{
if(RQ[j]>RQ[j+1])
{
int temp;
temp=RQ[j];
RQ[j]=RQ[j+1];
RQ[j+1]=temp;
}
}
}
int index;
for(i=0;i<n;i++)
{
if(initial<RQ[i])
{
index=i;
break;
}
}
// if movement is towards high value
if(move==1)
{
for(i=index;i<n;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
// last movement for max size
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
/*movement max to min disk */
TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
initial=0;
for( i=0;i<index;i++)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
}
// if movement is towards low value
else
{
for(i=index-1;i>=0;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
// last movement for min size
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
/*movement min to max disk */
TotalHeadMoment=TotalHeadMoment+abs(size-1-0);
initial =size-1;
for(i=n-1;i>=index;i--)
{
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
initial=RQ[i];
}
}
printf("Total head movement is %d",TotalHeadMoment);
return 0;
}

