Q1
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Function to sort the disk request array in ascending order
void sort(int *requests, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (requests[j] > requests[j + 1]) {
                int temp = requests[j];
                requests[j] = requests[j + 1];
                requests[j + 1] = temp;
            }
        }
    }
}

// Function to simulate the LOOK disk scheduling algorithm
void look(int *requests, int n, int start_head, bool left) {
    // Sort the requests array
    sort(requests, n);

    // Initialize variables
    int head = start_head;
    int total_head_movements = 0;
    int current_index = 0;

    // Determine the direction of movement
    int direction = left ? -1 : 1;

    printf("Order of disk requests served:\n");
    printf("%d ", head);

    // Handle requests in the given direction
    while (current_index < n) {
        int next_head = -1;

        // Search for the next request in the given direction
        for (int i = current_index; i < n; i++) {
            if (requests[i] >= 0 && requests[i] < 200) { // Assuming disk size is 200
                if ((left && requests[i] < head) || (!left && requests[i] > head)) {
                    next_head = requests[i];
                    current_index = i;
                    break;
                }
            }
        }

        // If no requests are found in the given direction, change direction
        if (next_head == -1) {
            direction *= -1;
            continue;
        }

        // Calculate head movements
        total_head_movements += abs(next_head - head);
        head = next_head;

        // Mark the current request as processed
        requests[current_index] = -1;

        // Print the current request
        printf("%d ", head);

        // Move to the next request
        current_index += direction;
    }

    printf("\nTotal head movements: %d\n", total_head_movements);
}

int main() {
    int n;
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);

    int *requests = (int *)malloc(n * sizeof(int));
    if (requests == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    printf("Enter the disk request string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    int start_head;
    printf("Enter the start head position: ");
    scanf("%d", &start_head);

    bool left;
    printf("Enter the direction (0 for left, 1 for right): ");
    scanf("%d", &left);

    look(requests, n, start_head, left);

    free(requests);
    return 0;
}


Q2
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char** argv)
{
int rank, size;
int array[ARRAY_SIZE];
int i, sum = 0, global_sum = 0;
// Initialize MPI
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
// Initialize random number generator
srand(time(NULL) + rank);
// Fill array with random numbers
for (i = 0; i < ARRAY_SIZE; i++) {
array[i] = rand() % 1000;
}
// Calculate local sum of odd numbers
for (i = 0; i < ARRAY_SIZE; i++) {
if (array[i] % 2 != 0) {
sum += array[i];
}
}
// Reduce sum across all processes
MPI_Reduce(&sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
if (rank == 0) {
printf("The sum of all odd numbers in the array is: %d\n", global_sum);
}
// Finalize MPI
MPI_Finalize();
return 0;
}
