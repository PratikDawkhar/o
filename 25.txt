Q1
#include <stdio.h>
#include <stdlib.h>

// Function to sort the disk requests
void sort(int *arr, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to find the index of the request nearest to the head position
int find_nearest_index(int *requests, int n, int head) {
    int min_diff = abs(head - requests[0]);
    int index = 0;

    for (int i = 1; i < n; i++) {
        if (abs(head - requests[i]) < min_diff) {
            min_diff = abs(head - requests[i]);
            index = i;
        }
    }

    return index;
}

// Function to implement the LOOK disk scheduling algorithm
void LOOK(int *requests, int n, int head, int direction) {
    int total_head_movements = 0;

    // Sort the requests
    sort(requests, n);

    // Find the nearest request to the head position
    int nearest_index = find_nearest_index(requests, n, head);

    printf("Order of serving requests:\n");

    // Serve requests in the forward direction
    if (direction == 1) {
        for (int i = nearest_index; i < n; i++) {
            printf("%d ", requests[i]);
            total_head_movements += abs(head - requests[i]);
            head = requests[i];
        }

        for (int i = nearest_index - 1; i >= 0; i--) {
            printf("%d ", requests[i]);
            total_head_movements += abs(head - requests[i]);
            head = requests[i];
        }
    }
    // Serve requests in the backward direction
    else {
        for (int i = nearest_index; i >= 0; i--) {
            printf("%d ", requests[i]);
            total_head_movements += abs(head - requests[i]);
            head = requests[i];
        }

        for (int i = nearest_index + 1; i < n; i++) {
            printf("%d ", requests[i]);
            total_head_movements += abs(head - requests[i]);
            head = requests[i];
        }
    }

    printf("\nTotal number of head movements: %d\n", total_head_movements);
}

int main() {
    int n, head, direction;

    // Accept total number of disk blocks
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);

    int *requests = (int *)malloc(n * sizeof(int));

    // Accept disk request string
    printf("Enter the disk request string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    // Accept current head position
    printf("Enter the current head position: ");
    scanf("%d", &head);

    // Accept direction
    printf("Enter the direction (1 for forward, 0 for backward): ");
    scanf("%d", &direction);

    // Call the LOOK function
    LOOK(requests, n, head, direction);

    free(requests);

    return 0;
}

Q2
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_BLOCKS 100

// Function to initialize the disk blocks
void initialize(int *disk, int n) {
    for (int i = 0; i < n; i++) {
        disk[i] = -1; // -1 indicates free block
    }
}

// Function to display the bit vector
void show_bit_vector(int *disk, int n) {
    printf("Bit Vector:\n");
    for (int i = 0; i < n; i++) {
        if (disk[i] == -1) {
            printf("0 ");
        } else {
            printf("1 ");
        }
    }
    printf("\n");
}

// Function to create a new file
void create_new_file(int *disk, int n) {
    int start_block, file_size;

    // Find a free block to start the file
    printf("Enter the starting block for the new file: ");
    scanf("%d", &start_block);

    if (disk[start_block] != -1) {
        printf("Error: The selected block is already allocated.\n");
        return;
    }

    // Accept the file size
    printf("Enter the size of the new file: ");
    scanf("%d", &file_size);

    // Allocate consecutive blocks for the file
    int current_block = start_block;
    for (int i = 0; i < file_size; i++) {
        disk[current_block] = 1; // 1 indicates allocated block
        current_block++;
    }

    printf("New file created successfully.\n");
}

// Function to show the directory
void show_directory(int *disk, int n) {
    printf("Directory:\n");
    printf("Start Block\tEnd Block\tSize\n");

    int start_block = -1, end_block = -1, size = 0;

    for (int i = 0; i < n; i++) {
        if (disk[i] == -1 && start_block == -1) {
            continue;
        }

        if (disk[i] == -1 && start_block != -1) {
            end_block = i - 1;
            size = end_block - start_block + 1;
            printf("%d\t\t%d\t\t%d\n", start_block, end_block, size);
            start_block = -1;
        }

        if (disk[i] != -1 && start_block == -1) {
            start_block = i;
        }
    }

    if (start_block != -1) {
        end_block = n - 1;
        size = end_block - start_block + 1;
        printf("%d\t\t%d\t\t%d\n", start_block, end_block, size);
    }
}

int main() {
    int n, choice;
    int disk[MAX_BLOCKS];

    // Seed the random number generator
    srand(time(NULL));

    // Accept total number of disk blocks
    printf("Enter the total number of disk blocks: ");
    scanf("%d", &n);

    initialize(disk, n);

    do {
        // Display menu
        printf("\nLinked File Allocation Menu:\n");
        printf("1. Show Bit Vector\n");
        printf("2. Create New File\n");
        printf("3. Show Directory\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                show_bit_vector(disk, n);
                break;
            case 2:
                create_new_file(disk, n);
                break;
            case 3:
                show_directory(disk, n);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please enter a number between 1 and 4.\n");
        }
    } while (choice != 4);

    return 0;
}
